# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- if index .Values "open-match-core" "enabled" }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "openmatch.configmap.default" . }}
  namespace: {{ .Release.Namespace }}
  annotations: {{- include "openmatch.chartmeta" . | nindent 4 }}
  labels:
    app: {{ template "openmatch.name" . }}
    component: config
    release: {{ .Release.Name }}
data:
  matchmaker_config_default.yaml: |-
    logging:
      {{- if .Values.global.logging.level }}
      level: {{ .Values.global.logging.level }}
      {{- else }}
      level: debug
      {{- end }}
      {{- if .Values.global.telemetry.stackdriverMetrics.enabled }}
      format: stackdriver
      {{- else }}
      format: text
      {{- end }}
      rpc: {{ .Values.global.logging.rpc.enabled }}
    # Open Match applies the exponential backoff strategy for its retryable gRPC calls.
    # The settings below are the default backoff configuration used in Open Match.
    # See https://github.com/cenkalti/backoff/blob/v3/exponential.go for detailed explanations
    backoff:
      # The initial retry interval (in milliseconds)
      initialInterval: 100ms
      # maxInterval caps the maximum time elapsed for a retry interval
      maxInterval: 500ms
      # The next retry interval is multiplied by this multiplier
      multiplier: 1.5
      # Randomize the retry interval
      randFactor: 0.5
      # maxElapsedTime caps the retry time (in milliseconds)
      maxElapsedTime: 3000ms

    api:
      backend:
        hostname: "{{ include "openmatch.backend.hostName" . }}"
        grpcport: "{{ .Values.backend.grpcPort }}"
        httpport: "{{ .Values.backend.httpPort }}"
      frontend:
        hostname: "{{ include "openmatch.frontend.hostName" . }}"
        grpcport: "{{ .Values.frontend.grpcPort }}"
        httpport: "{{ .Values.frontend.httpPort }}"
      query:
        hostname: "{{ include "openmatch.query.hostName" . }}"
        grpcport: "{{ .Values.query.grpcPort }}"
        httpport: "{{ .Values.query.httpPort }}"
      synchronizer:
        hostname: "{{ include "openmatch.synchronizer.hostName" . }}"
        grpcport: "{{ .Values.synchronizer.grpcPort }}"
        httpport: "{{ .Values.synchronizer.httpPort }}"
      swaggerui:
        hostname: "{{ include "openmatch.swaggerui.hostName" . }}"
        httpport: "{{ .Values.swaggerui.httpPort }}"

      # Configurations for api.test and api.scale are used for testing.
      test:
        hostname: "{{ include "openmatch.fullname" . }}-test"
        grpcport: "50509"
        httpport: "51509"
      scale:
        httpport: "51509"

{{- if .Values.global.tls.enabled }}
      tls:
        trustedCertificatePath: "{{.Values.global.tls.rootca.mountPath}}/public.cert"
        certificatefile: "{{.Values.global.tls.server.mountPath}}/public.cert"
        privatekey: "{{.Values.global.tls.server.mountPath}}/private.key"
        rootcertificatefile: "{{.Values.global.tls.rootca.mountPath}}/public.cert"
{{- end }}

    redis:
{{- if index .Values "open-match-core" "redis" "enabled" }}
{{- if index .Values "redis" "sentinel" "enabled"}}
      sentinelPort: {{ .Values.redis.sentinel.port }}
      sentinelMaster: {{ .Values.redis.sentinel.masterSet }}
      sentinelHostname: {{ include "call-nested" (list . "redis" "common.names.fullname") }}
      sentinelUsePassword: {{ .Values.redis.sentinel.usePassword }}
{{- else}}
      # Open Match's default Redis setups
      hostname: {{ include "call-nested" (list . "redis" "common.names.fullname") }}-master.{{ .Release.Namespace }}.svc.cluster.local
      {{- if .Values.redis.redisPort }}
      # source value: redis.redisPort = {{ .Values.redis.redisPort }}
      port: {{ .Values.redis.redisPort }}
      {{- else if index .Values "open-match-core" "redis" "port" }}
      # source value: open-match-core.redis.port = {{ index .Values "open-match-core" "redis" "port"}}
      port: {{    index .Values "open-match-core" "redis" "port" }}
      {{- end }}
      {{- if .Values.redis.user }}
      # source value: redis.user = {{ .Values.redis.user }}
      user: {{ .Values.redis.user }}
      {{- else if index .Values "open-match-core" "redis" "user" }}
      # source value: open-match-core.redis.user = {{ index .Values "open-match-core" "redis" "user"}}
      user: {{ index .Values "open-match-core" "redis" "user"}}
      {{- end }}
{{- end}}
{{- else }}
      # BYO Redis setups
      hostname: {{ index .Values "open-match-core" "redis" "hostname" }}
      port: {{ index .Values "open-match-core" "redis" "port" }}
      user: {{ index .Values "open-match-core" "redis" "user" }}
{{- end }}
      usePassword: {{ .Values.redis.auth.enabled }}
      passwordPath: {{ .Values.redis.secretMountPath }}/redis-password
      pool:
        maxIdle: {{ index .Values "open-match-core" "redis" "pool" "maxIdle" }}
        maxActive: {{ index .Values "open-match-core" "redis" "pool" "maxActive" }}
        idleTimeout: {{ index .Values "open-match-core" "redis" "pool" "idleTimeout" }}
        healthCheckTimeout: {{ index .Values "open-match-core" "redis" "pool" "healthCheckTimeout" }}

    telemetry:
      reportingPeriod: "{{ .Values.global.telemetry.reportingPeriod }}"
      traceSamplingFraction: "{{ .Values.global.telemetry.traceSamplingFraction }}"
      zpages:
        enable: "{{ .Values.global.telemetry.zpages.enabled }}"
      prometheus:
        enable: "{{ .Values.global.telemetry.prometheus.enabled }}"
        endpoint: "{{ .Values.global.telemetry.prometheus.endpoint }}"
        serviceDiscovery: "{{ .Values.global.telemetry.prometheus.serviceDiscovery }}"
      stackdriverMetrics:
        enable: "{{ .Values.global.telemetry.stackdriverMetrics.enabled }}"
        gcpProjectId: "{{ .Values.global.gcpProjectId }}"
        prefix: "{{ .Values.global.telemetry.stackdriverMetrics.prefix }}"
{{- end }}
