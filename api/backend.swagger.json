{
  "swagger": "2.0",
  "info": {
    "title": "Backend",
    "version": "1.0",
    "contact": {
      "name": "Open Match",
      "url": "https://open-match.dev",
      "email": "open-match-discuss@googlegroups.com"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "https://github.com/googleforgames/open-match/blob/master/LICENSE"
    }
  },
  "tags": [
    {
      "name": "BackendService"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/backendservice/matches:fetch": {
      "post": {
        "summary": "FetchMatches triggers a MatchFunction with the specified MatchProfile and\nreturns a set of matches generated by the Match Making Function, and\naccepted by the evaluator.\nTickets in matches returned by FetchMatches are moved from active to\npending, and will not be returned by query.",
        "operationId": "BackendService_FetchMatches",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/openmatchFetchMatchesResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of openmatchFetchMatchesResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/openmatchFetchMatchesRequest"
            }
          }
        ],
        "tags": [
          "BackendService"
        ]
      }
    },
    "/v1/backendservice/tickets:assign": {
      "post": {
        "summary": "AssignTickets overwrites the Assignment field of the input TicketIds.",
        "operationId": "BackendService_AssignTickets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/openmatchAssignTicketsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/openmatchAssignTicketsRequest"
            }
          }
        ],
        "tags": [
          "BackendService"
        ]
      }
    },
    "/v1/backendservice/tickets:release": {
      "post": {
        "summary": "ReleaseTickets moves tickets from the pending state, to the active state.\nThis enables them to be returned by query, and find different matches.\nBETA FEATURE WARNING:  This call and the associated Request and Response\nmessages are not finalized and still subject to possible change or removal.",
        "operationId": "BackendService_ReleaseTickets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/openmatchReleaseTicketsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/openmatchReleaseTicketsRequest"
            }
          }
        ],
        "tags": [
          "BackendService"
        ]
      }
    },
    "/v1/backendservice/tickets:releaseall": {
      "post": {
        "summary": "ReleaseAllTickets moves all tickets from the pending state, to the active\nstate. This enables them to be returned by query, and find different\nmatches.\nBETA FEATURE WARNING:  This call and the associated Request and Response\nmessages are not finalized and still subject to possible change or removal.",
        "operationId": "BackendService_ReleaseAllTickets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/openmatchReleaseAllTicketsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/openmatchReleaseAllTicketsRequest"
            }
          }
        ],
        "tags": [
          "BackendService"
        ]
      }
    }
  },
  "definitions": {
    "AssignmentFailureCause": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "TICKET_NOT_FOUND"
      ],
      "default": "UNKNOWN"
    },
    "DoubleRangeFilterExclude": {
      "type": "string",
      "enum": [
        "NONE",
        "MIN",
        "MAX",
        "BOTH"
      ],
      "default": "NONE",
      "title": "- NONE: No bounds should be excluded when evaluating the filter, i.e.: MIN \u003c= x \u003c= MAX\n - MIN: Only the minimum bound should be excluded when evaluating the filter, i.e.: MIN \u003c x \u003c= MAX\n - MAX: Only the maximum bound should be excluded when evaluating the filter, i.e.: MIN \u003c= x \u003c MAX\n - BOTH: Both bounds should be excluded when evaluating the filter, i.e.: MIN \u003c x \u003c MAX"
    },
    "openmatchAssignTicketsRequest": {
      "type": "object",
      "properties": {
        "assignments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/openmatchAssignmentGroup"
          },
          "description": "Assignments is a list of assignment groups that contain assignment and the Tickets to which they should be applied."
        }
      }
    },
    "openmatchAssignTicketsResponse": {
      "type": "object",
      "properties": {
        "failures": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/openmatchAssignmentFailure"
          },
          "description": "Failures is a list of all the Tickets that failed assignment along with the cause of failure."
        }
      }
    },
    "openmatchAssignment": {
      "type": "object",
      "properties": {
        "connection": {
          "type": "string",
          "description": "Connection information for this Assignment."
        },
        "extensions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Customized information not inspected by Open Match, to be used by the match\nmaking function, evaluator, and components making calls to Open Match.\nOptional, depending on the requirements of the connected systems."
        }
      },
      "description": "An Assignment represents a game server assignment associated with a Ticket.\nOpen Match does not require or inspect any fields on assignment."
    },
    "openmatchAssignmentFailure": {
      "type": "object",
      "properties": {
        "ticket_id": {
          "type": "string"
        },
        "cause": {
          "$ref": "#/definitions/AssignmentFailureCause"
        }
      },
      "description": "AssignmentFailure contains the id of the Ticket that failed the Assignment and the failure status."
    },
    "openmatchAssignmentGroup": {
      "type": "object",
      "properties": {
        "ticket_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "TicketIds is a list of strings representing Open Match generated Ids which apply to an Assignment."
        },
        "assignment": {
          "$ref": "#/definitions/openmatchAssignment",
          "description": "An Assignment specifies game connection related information to be associated with the TicketIds."
        }
      },
      "description": "AssignmentGroup contains an Assignment and the Tickets to which it should be applied."
    },
    "openmatchBackfill": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id represents an auto-generated Id issued by Open Match."
        },
        "search_fields": {
          "$ref": "#/definitions/openmatchSearchFields",
          "description": "Search fields are the fields which Open Match is aware of, and can be used\nwhen specifying filters."
        },
        "extensions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Customized information not inspected by Open Match, to be used by\nthe Match Function, evaluator, and components making calls to Open Match.\nOptional, depending on the requirements of the connected systems."
        },
        "persistent_field": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Customized information not inspected by Open Match, to be kept persistent \nthroughout the life-cycle of a backfill. \nOptional, depending on the requirements of the connected systems."
        },
        "create_time": {
          "type": "string",
          "format": "date-time",
          "description": "Create time is the time the Ticket was created. It is populated by Open\nMatch at the time of Ticket creation."
        },
        "generation": {
          "type": "string",
          "format": "int64",
          "description": "Generation gets incremented on GameServers update operations.\nPrevents the MMF from overriding a newer version from the game server.\nDo NOT read or write to this field, it is for internal tracking, and changing the value will cause bugs."
        }
      },
      "description": "Represents a backfill entity which is used to fill partially full matches.\n\nBETA FEATURE WARNING:  This call and the associated Request and Response\nmessages are not finalized and still subject to possible change or removal."
    },
    "openmatchDoubleRangeFilter": {
      "type": "object",
      "properties": {
        "double_arg": {
          "type": "string",
          "description": "Name of the ticket's search_fields.double_args this Filter operates on."
        },
        "max": {
          "type": "number",
          "format": "double",
          "description": "Maximum value."
        },
        "min": {
          "type": "number",
          "format": "double",
          "description": "Minimum value."
        },
        "exclude": {
          "$ref": "#/definitions/DoubleRangeFilterExclude",
          "description": "Defines the bounds to apply when filtering tickets by their search_fields.double_args value.\nBETA FEATURE WARNING: This field and the associated values are\nnot finalized and still subject to possible change or removal."
        }
      },
      "title": "Filters numerical values to only those within a range.\n  double_arg: \"foo\"\n  max: 10\n  min: 5\nmatches:\n  {\"foo\": 5}\n  {\"foo\": 7.5}\n  {\"foo\": 10}\ndoes not match:\n  {\"foo\": 4}\n  {\"foo\": 10.01}\n  {\"foo\": \"7.5\"}\n  {}"
    },
    "openmatchFetchMatchesRequest": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/openmatchFunctionConfig",
          "description": "A configuration for the MatchFunction server of this FetchMatches call."
        },
        "profile": {
          "$ref": "#/definitions/openmatchMatchProfile",
          "description": "A MatchProfile that will be sent to the MatchFunction server of this FetchMatches call."
        }
      }
    },
    "openmatchFetchMatchesResponse": {
      "type": "object",
      "properties": {
        "match": {
          "$ref": "#/definitions/openmatchMatch",
          "description": "A Match generated by the user-defined MMF with the specified MatchProfiles.\nA valid Match response will contain at least one ticket."
        }
      }
    },
    "openmatchFunctionConfig": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "$ref": "#/definitions/openmatchFunctionConfigType"
        }
      },
      "title": "FunctionConfig specifies a MMF address and client type for Backend to establish connections with the MMF"
    },
    "openmatchFunctionConfigType": {
      "type": "string",
      "enum": [
        "GRPC",
        "REST"
      ],
      "default": "GRPC"
    },
    "openmatchMatch": {
      "type": "object",
      "properties": {
        "match_id": {
          "type": "string",
          "description": "A Match ID that should be passed through the stack for tracing."
        },
        "match_profile": {
          "type": "string",
          "description": "Name of the match profile that generated this Match."
        },
        "match_function": {
          "type": "string",
          "description": "Name of the match function that generated this Match."
        },
        "tickets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/openmatchTicket"
          },
          "description": "Tickets belonging to this match."
        },
        "extensions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Customized information not inspected by Open Match, to be used by the match\nmaking function, evaluator, and components making calls to Open Match.\nOptional, depending on the requirements of the connected systems."
        },
        "backfill": {
          "$ref": "#/definitions/openmatchBackfill",
          "description": "Backfill request which contains additional information to the match\nand contains an association to a GameServer.\nBETA FEATURE WARNING: This field is not finalized and still subject\nto possible change or removal."
        },
        "allocate_gameserver": {
          "type": "boolean",
          "description": "AllocateGameServer signalise Director that Backfill is new and it should \nallocate a GameServer, this Backfill would be assigned.\nBETA FEATURE WARNING: This field is not finalized and still subject\nto possible change or removal."
        }
      },
      "description": "A Match is used to represent a completed match object. It can be generated by\na MatchFunction as a proposal or can be returned by OpenMatch as a result in\nresponse to the FetchMatches call.\nWhen a match is returned by the FetchMatches call, it should contain at least\none ticket to be considered as valid."
    },
    "openmatchMatchProfile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of this match profile."
        },
        "pools": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/openmatchPool"
          },
          "description": "Set of pools to be queried when generating a match for this MatchProfile."
        },
        "extensions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Customized information not inspected by Open Match, to be used by the match\nmaking function, evaluator, and components making calls to Open Match.\nOptional, depending on the requirements of the connected systems."
        }
      },
      "description": "A MatchProfile is Open Match's representation of a Match specification. It is\nused to indicate the criteria for selecting players for a match. A\nMatchProfile is the input to the API to get matches and is passed to the\nMatchFunction. It contains all the information required by the MatchFunction\nto generate match proposals."
    },
    "openmatchPool": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A developer-chosen human-readable name for this Pool."
        },
        "double_range_filters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/openmatchDoubleRangeFilter"
          },
          "description": "Set of Filters indicating the filtering criteria. Selected tickets must\nmatch every Filter."
        },
        "string_equals_filters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/openmatchStringEqualsFilter"
          }
        },
        "tag_present_filters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/openmatchTagPresentFilter"
          }
        },
        "created_before": {
          "type": "string",
          "format": "date-time",
          "description": "If specified, only Tickets created before the specified time are selected."
        },
        "created_after": {
          "type": "string",
          "format": "date-time",
          "description": "If specified, only Tickets created after the specified time are selected."
        }
      },
      "description": "Pool specfies a set of criteria that are used to select a subset of Tickets\nthat meet all the criteria."
    },
    "openmatchReleaseAllTicketsRequest": {
      "type": "object"
    },
    "openmatchReleaseAllTicketsResponse": {
      "type": "object"
    },
    "openmatchReleaseTicketsRequest": {
      "type": "object",
      "properties": {
        "ticket_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "TicketIds is a list of string representing Open Match generated Ids to be re-enabled for MMF querying\nbecause they are no longer awaiting assignment from a previous match result"
        }
      }
    },
    "openmatchReleaseTicketsResponse": {
      "type": "object"
    },
    "openmatchSearchFields": {
      "type": "object",
      "properties": {
        "double_args": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          },
          "description": "Float arguments.  Filterable on ranges."
        },
        "string_args": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "String arguments.  Filterable on equality."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Filterable on presence or absence of given value."
        }
      },
      "description": "Search fields are the fields which Open Match is aware of, and can be used\nwhen specifying filters."
    },
    "openmatchStringEqualsFilter": {
      "type": "object",
      "properties": {
        "string_arg": {
          "type": "string",
          "description": "Name of the ticket's search_fields.string_args this Filter operates on."
        },
        "value": {
          "type": "string"
        }
      },
      "title": "Filters strings exactly equaling a value.\n  string_arg: \"foo\"\n  value: \"bar\"\nmatches:\n  {\"foo\": \"bar\"}\ndoes not match:\n  {\"foo\": \"baz\"}\n  {\"bar\": \"foo\"}\n  {}"
    },
    "openmatchTagPresentFilter": {
      "type": "object",
      "properties": {
        "tag": {
          "type": "string"
        }
      },
      "title": "Filters to the tag being present on the search_fields.\n  tag: \"foo\"\nmatches:\n  [\"foo\"]\n  [\"bar\",\"foo\"]\ndoes not match:\n  [\"bar\"]\n  []"
    },
    "openmatchTicket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id represents an auto-generated Id issued by Open Match."
        },
        "assignment": {
          "$ref": "#/definitions/openmatchAssignment",
          "description": "An Assignment represents a game server assignment associated with a Ticket,\nor whatever finalized matched state means for your use case.\nOpen Match does not require or inspect any fields on Assignment."
        },
        "search_fields": {
          "$ref": "#/definitions/openmatchSearchFields",
          "description": "Search fields are the fields which Open Match is aware of, and can be used\nwhen specifying filters."
        },
        "extensions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Customized information not inspected by Open Match, to be used by the match\nmaking function, evaluator, and components making calls to Open Match.\nOptional, depending on the requirements of the connected systems."
        },
        "persistent_field": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Customized information not inspected by Open Match, to be kept persistent \nthroughout the life-cycle of a ticket. \nOptional, depending on the requirements of the connected systems."
        },
        "create_time": {
          "type": "string",
          "format": "date-time",
          "description": "Create time is the time the Ticket was created. It is populated by Open\nMatch at the time of Ticket creation."
        }
      },
      "description": "A Ticket is a basic matchmaking entity in Open Match. A Ticket may represent\nan individual 'Player', a 'Group' of players, or any other concepts unique to\nyour use case. Open Match will not interpret what the Ticket represents but\njust treat it as a matchmaking unit with a set of SearchFields. Open Match\nstores the Ticket in state storage and enables an Assignment to be set on the\nTicket."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    }
  },
  "externalDocs": {
    "description": "Open Match Documentation",
    "url": "https://open-match.dev/site/docs/"
  }
}
