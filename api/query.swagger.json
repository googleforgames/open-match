{
  "swagger": "2.0",
  "info": {
    "title": "MM Logic (Data Layer)",
    "version": "1.0",
    "contact": {
      "name": "Open Match",
      "url": "https://open-match.dev",
      "email": "open-match-discuss@googlegroups.com"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "https://github.com/googleforgames/open-match/blob/master/LICENSE"
    }
  },
  "tags": [
    {
      "name": "QueryService"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/queryservice/backfills:query": {
      "post": {
        "summary": "QueryBackfills gets a list of Backfills.\nBETA FEATURE WARNING:  This call and the associated Request and Response\nmessages are not finalized and still subject to possible change or removal.",
        "operationId": "QueryService_QueryBackfills",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/openmatchQueryBackfillsResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of openmatchQueryBackfillsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "BETA FEATURE WARNING:  This Request messages are not finalized and \nstill subject to possible change or removal.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/openmatchQueryBackfillsRequest"
            }
          }
        ],
        "tags": [
          "QueryService"
        ]
      }
    },
    "/v1/queryservice/ticketids:query": {
      "post": {
        "summary": "QueryTicketIds gets the list of TicketIDs that meet all the filtering criteria requested by the pool.\n  - If the Pool contains no Filters, QueryTicketIds will return all TicketIDs in the state storage.\nQueryTicketIds pages the TicketIDs by `queryPageSize` and stream back responses.\n  - queryPageSize is default to 1000 if not set, and has a minimum of 10 and maximum of 10000.",
        "operationId": "QueryService_QueryTicketIds",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/openmatchQueryTicketIdsResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of openmatchQueryTicketIdsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/openmatchQueryTicketIdsRequest"
            }
          }
        ],
        "tags": [
          "QueryService"
        ]
      }
    },
    "/v1/queryservice/tickets:query": {
      "post": {
        "summary": "QueryTickets gets a list of Tickets that match all Filters of the input Pool.\n  - If the Pool contains no Filters, QueryTickets will return all Tickets in the state storage.\nQueryTickets pages the Tickets by `queryPageSize` and stream back responses.\n  - queryPageSize is default to 1000 if not set, and has a minimum of 10 and maximum of 10000.",
        "operationId": "QueryService_QueryTickets",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/openmatchQueryTicketsResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of openmatchQueryTicketsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/openmatchQueryTicketsRequest"
            }
          }
        ],
        "tags": [
          "QueryService"
        ]
      }
    }
  },
  "definitions": {
    "DoubleRangeFilterExclude": {
      "type": "string",
      "enum": [
        "NONE",
        "MIN",
        "MAX",
        "BOTH"
      ],
      "default": "NONE",
      "title": "- NONE: No bounds should be excluded when evaluating the filter, i.e.: MIN \u003c= x \u003c= MAX\n - MIN: Only the minimum bound should be excluded when evaluating the filter, i.e.: MIN \u003c x \u003c= MAX\n - MAX: Only the maximum bound should be excluded when evaluating the filter, i.e.: MIN \u003c= x \u003c MAX\n - BOTH: Both bounds should be excluded when evaluating the filter, i.e.: MIN \u003c x \u003c MAX"
    },
    "openmatchAssignment": {
      "type": "object",
      "properties": {
        "connection": {
          "type": "string",
          "description": "Connection information for this Assignment."
        },
        "extensions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Customized information not inspected by Open Match, to be used by the match\nmaking function, evaluator, and components making calls to Open Match.\nOptional, depending on the requirements of the connected systems."
        }
      },
      "description": "An Assignment represents a game server assignment associated with a Ticket.\nOpen Match does not require or inspect any fields on assignment."
    },
    "openmatchBackfill": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id represents an auto-generated Id issued by Open Match."
        },
        "search_fields": {
          "$ref": "#/definitions/openmatchSearchFields",
          "description": "Search fields are the fields which Open Match is aware of, and can be used\nwhen specifying filters."
        },
        "extensions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Customized information not inspected by Open Match, to be used by\nthe Match Function, evaluator, and components making calls to Open Match.\nOptional, depending on the requirements of the connected systems."
        },
        "persistent_field": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Customized information not inspected by Open Match, to be kept persistent \nthroughout the life-cycle of a backfill. \nOptional, depending on the requirements of the connected systems."
        },
        "create_time": {
          "type": "string",
          "format": "date-time",
          "description": "Create time is the time the Ticket was created. It is populated by Open\nMatch at the time of Ticket creation."
        },
        "generation": {
          "type": "string",
          "format": "int64",
          "description": "Generation gets incremented on GameServers update operations.\nPrevents the MMF from overriding a newer version from the game server.\nDo NOT read or write to this field, it is for internal tracking, and changing the value will cause bugs."
        }
      },
      "description": "Represents a backfill entity which is used to fill partially full matches.\n\nBETA FEATURE WARNING:  This call and the associated Request and Response\nmessages are not finalized and still subject to possible change or removal."
    },
    "openmatchDoubleRangeFilter": {
      "type": "object",
      "properties": {
        "double_arg": {
          "type": "string",
          "description": "Name of the ticket's search_fields.double_args this Filter operates on."
        },
        "max": {
          "type": "number",
          "format": "double",
          "description": "Maximum value."
        },
        "min": {
          "type": "number",
          "format": "double",
          "description": "Minimum value."
        },
        "exclude": {
          "$ref": "#/definitions/DoubleRangeFilterExclude",
          "description": "Defines the bounds to apply when filtering tickets by their search_fields.double_args value.\nBETA FEATURE WARNING: This field and the associated values are\nnot finalized and still subject to possible change or removal."
        }
      },
      "title": "Filters numerical values to only those within a range.\n  double_arg: \"foo\"\n  max: 10\n  min: 5\nmatches:\n  {\"foo\": 5}\n  {\"foo\": 7.5}\n  {\"foo\": 10}\ndoes not match:\n  {\"foo\": 4}\n  {\"foo\": 10.01}\n  {\"foo\": \"7.5\"}\n  {}"
    },
    "openmatchPool": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A developer-chosen human-readable name for this Pool."
        },
        "double_range_filters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/openmatchDoubleRangeFilter"
          },
          "description": "Set of Filters indicating the filtering criteria. Selected tickets must\nmatch every Filter."
        },
        "string_equals_filters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/openmatchStringEqualsFilter"
          }
        },
        "tag_present_filters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/openmatchTagPresentFilter"
          }
        },
        "created_before": {
          "type": "string",
          "format": "date-time",
          "description": "If specified, only Tickets created before the specified time are selected."
        },
        "created_after": {
          "type": "string",
          "format": "date-time",
          "description": "If specified, only Tickets created after the specified time are selected."
        }
      },
      "description": "Pool specfies a set of criteria that are used to select a subset of Tickets\nthat meet all the criteria."
    },
    "openmatchQueryBackfillsRequest": {
      "type": "object",
      "properties": {
        "pool": {
          "$ref": "#/definitions/openmatchPool",
          "description": "The Pool representing the set of Filters to be queried."
        }
      },
      "description": "BETA FEATURE WARNING:  This Request messages are not finalized and \nstill subject to possible change or removal."
    },
    "openmatchQueryBackfillsResponse": {
      "type": "object",
      "properties": {
        "backfills": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/openmatchBackfill"
          },
          "description": "Backfills that meet all the filtering criteria requested by the pool."
        }
      },
      "description": "BETA FEATURE WARNING:  This Request messages are not finalized and \nstill subject to possible change or removal."
    },
    "openmatchQueryTicketIdsRequest": {
      "type": "object",
      "properties": {
        "pool": {
          "$ref": "#/definitions/openmatchPool",
          "description": "The Pool representing the set of Filters to be queried."
        }
      }
    },
    "openmatchQueryTicketIdsResponse": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "TicketIDs that meet all the filtering criteria requested by the pool."
        }
      }
    },
    "openmatchQueryTicketsRequest": {
      "type": "object",
      "properties": {
        "pool": {
          "$ref": "#/definitions/openmatchPool",
          "description": "The Pool representing the set of Filters to be queried."
        }
      }
    },
    "openmatchQueryTicketsResponse": {
      "type": "object",
      "properties": {
        "tickets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/openmatchTicket"
          },
          "description": "Tickets that meet all the filtering criteria requested by the pool."
        }
      }
    },
    "openmatchSearchFields": {
      "type": "object",
      "properties": {
        "double_args": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          },
          "description": "Float arguments.  Filterable on ranges."
        },
        "string_args": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "String arguments.  Filterable on equality."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Filterable on presence or absence of given value."
        }
      },
      "description": "Search fields are the fields which Open Match is aware of, and can be used\nwhen specifying filters."
    },
    "openmatchStringEqualsFilter": {
      "type": "object",
      "properties": {
        "string_arg": {
          "type": "string",
          "description": "Name of the ticket's search_fields.string_args this Filter operates on."
        },
        "value": {
          "type": "string"
        }
      },
      "title": "Filters strings exactly equaling a value.\n  string_arg: \"foo\"\n  value: \"bar\"\nmatches:\n  {\"foo\": \"bar\"}\ndoes not match:\n  {\"foo\": \"baz\"}\n  {\"bar\": \"foo\"}\n  {}"
    },
    "openmatchTagPresentFilter": {
      "type": "object",
      "properties": {
        "tag": {
          "type": "string"
        }
      },
      "title": "Filters to the tag being present on the search_fields.\n  tag: \"foo\"\nmatches:\n  [\"foo\"]\n  [\"bar\",\"foo\"]\ndoes not match:\n  [\"bar\"]\n  []"
    },
    "openmatchTicket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id represents an auto-generated Id issued by Open Match."
        },
        "assignment": {
          "$ref": "#/definitions/openmatchAssignment",
          "description": "An Assignment represents a game server assignment associated with a Ticket,\nor whatever finalized matched state means for your use case.\nOpen Match does not require or inspect any fields on Assignment."
        },
        "search_fields": {
          "$ref": "#/definitions/openmatchSearchFields",
          "description": "Search fields are the fields which Open Match is aware of, and can be used\nwhen specifying filters."
        },
        "extensions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Customized information not inspected by Open Match, to be used by the match\nmaking function, evaluator, and components making calls to Open Match.\nOptional, depending on the requirements of the connected systems."
        },
        "persistent_field": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Customized information not inspected by Open Match, to be kept persistent \nthroughout the life-cycle of a ticket. \nOptional, depending on the requirements of the connected systems."
        },
        "create_time": {
          "type": "string",
          "format": "date-time",
          "description": "Create time is the time the Ticket was created. It is populated by Open\nMatch at the time of Ticket creation."
        }
      },
      "description": "A Ticket is a basic matchmaking entity in Open Match. A Ticket may represent\nan individual 'Player', a 'Group' of players, or any other concepts unique to\nyour use case. Open Match will not interpret what the Ticket represents but\njust treat it as a matchmaking unit with a set of SearchFields. Open Match\nstores the Ticket in state storage and enables an Assignment to be set on the\nTicket."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    }
  },
  "externalDocs": {
    "description": "Open Match Documentation",
    "url": "https://open-match.dev/site/docs/"
  }
}
