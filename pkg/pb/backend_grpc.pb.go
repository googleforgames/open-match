// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: api/backend.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BackendService_FetchMatches_FullMethodName      = "/openmatch.BackendService/FetchMatches"
	BackendService_AssignTickets_FullMethodName     = "/openmatch.BackendService/AssignTickets"
	BackendService_ReleaseTickets_FullMethodName    = "/openmatch.BackendService/ReleaseTickets"
	BackendService_ReleaseAllTickets_FullMethodName = "/openmatch.BackendService/ReleaseAllTickets"
)

// BackendServiceClient is the client API for BackendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendServiceClient interface {
	// FetchMatches triggers a MatchFunction with the specified MatchProfile and
	// returns a set of matches generated by the Match Making Function, and
	// accepted by the evaluator.
	// Tickets in matches returned by FetchMatches are moved from active to
	// pending, and will not be returned by query.
	FetchMatches(ctx context.Context, in *FetchMatchesRequest, opts ...grpc.CallOption) (BackendService_FetchMatchesClient, error)
	// AssignTickets overwrites the Assignment field of the input TicketIds.
	AssignTickets(ctx context.Context, in *AssignTicketsRequest, opts ...grpc.CallOption) (*AssignTicketsResponse, error)
	// ReleaseTickets moves tickets from the pending state, to the active state.
	// This enables them to be returned by query, and find different matches.
	// BETA FEATURE WARNING:  This call and the associated Request and Response
	// messages are not finalized and still subject to possible change or removal.
	ReleaseTickets(ctx context.Context, in *ReleaseTicketsRequest, opts ...grpc.CallOption) (*ReleaseTicketsResponse, error)
	// ReleaseAllTickets moves all tickets from the pending state, to the active
	// state. This enables them to be returned by query, and find different
	// matches.
	// BETA FEATURE WARNING:  This call and the associated Request and Response
	// messages are not finalized and still subject to possible change or removal.
	ReleaseAllTickets(ctx context.Context, in *ReleaseAllTicketsRequest, opts ...grpc.CallOption) (*ReleaseAllTicketsResponse, error)
}

type backendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendServiceClient(cc grpc.ClientConnInterface) BackendServiceClient {
	return &backendServiceClient{cc}
}

func (c *backendServiceClient) FetchMatches(ctx context.Context, in *FetchMatchesRequest, opts ...grpc.CallOption) (BackendService_FetchMatchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &BackendService_ServiceDesc.Streams[0], BackendService_FetchMatches_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &backendServiceFetchMatchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BackendService_FetchMatchesClient interface {
	Recv() (*FetchMatchesResponse, error)
	grpc.ClientStream
}

type backendServiceFetchMatchesClient struct {
	grpc.ClientStream
}

func (x *backendServiceFetchMatchesClient) Recv() (*FetchMatchesResponse, error) {
	m := new(FetchMatchesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *backendServiceClient) AssignTickets(ctx context.Context, in *AssignTicketsRequest, opts ...grpc.CallOption) (*AssignTicketsResponse, error) {
	out := new(AssignTicketsResponse)
	err := c.cc.Invoke(ctx, BackendService_AssignTickets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ReleaseTickets(ctx context.Context, in *ReleaseTicketsRequest, opts ...grpc.CallOption) (*ReleaseTicketsResponse, error) {
	out := new(ReleaseTicketsResponse)
	err := c.cc.Invoke(ctx, BackendService_ReleaseTickets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) ReleaseAllTickets(ctx context.Context, in *ReleaseAllTicketsRequest, opts ...grpc.CallOption) (*ReleaseAllTicketsResponse, error) {
	out := new(ReleaseAllTicketsResponse)
	err := c.cc.Invoke(ctx, BackendService_ReleaseAllTickets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServiceServer is the server API for BackendService service.
// All implementations should embed UnimplementedBackendServiceServer
// for forward compatibility
type BackendServiceServer interface {
	// FetchMatches triggers a MatchFunction with the specified MatchProfile and
	// returns a set of matches generated by the Match Making Function, and
	// accepted by the evaluator.
	// Tickets in matches returned by FetchMatches are moved from active to
	// pending, and will not be returned by query.
	FetchMatches(*FetchMatchesRequest, BackendService_FetchMatchesServer) error
	// AssignTickets overwrites the Assignment field of the input TicketIds.
	AssignTickets(context.Context, *AssignTicketsRequest) (*AssignTicketsResponse, error)
	// ReleaseTickets moves tickets from the pending state, to the active state.
	// This enables them to be returned by query, and find different matches.
	// BETA FEATURE WARNING:  This call and the associated Request and Response
	// messages are not finalized and still subject to possible change or removal.
	ReleaseTickets(context.Context, *ReleaseTicketsRequest) (*ReleaseTicketsResponse, error)
	// ReleaseAllTickets moves all tickets from the pending state, to the active
	// state. This enables them to be returned by query, and find different
	// matches.
	// BETA FEATURE WARNING:  This call and the associated Request and Response
	// messages are not finalized and still subject to possible change or removal.
	ReleaseAllTickets(context.Context, *ReleaseAllTicketsRequest) (*ReleaseAllTicketsResponse, error)
}

// UnimplementedBackendServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBackendServiceServer struct {
}

func (UnimplementedBackendServiceServer) FetchMatches(*FetchMatchesRequest, BackendService_FetchMatchesServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchMatches not implemented")
}
func (UnimplementedBackendServiceServer) AssignTickets(context.Context, *AssignTicketsRequest) (*AssignTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTickets not implemented")
}
func (UnimplementedBackendServiceServer) ReleaseTickets(context.Context, *ReleaseTicketsRequest) (*ReleaseTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseTickets not implemented")
}
func (UnimplementedBackendServiceServer) ReleaseAllTickets(context.Context, *ReleaseAllTicketsRequest) (*ReleaseAllTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseAllTickets not implemented")
}

// UnsafeBackendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServiceServer will
// result in compilation errors.
type UnsafeBackendServiceServer interface {
	mustEmbedUnimplementedBackendServiceServer()
}

func RegisterBackendServiceServer(s grpc.ServiceRegistrar, srv BackendServiceServer) {
	s.RegisterService(&BackendService_ServiceDesc, srv)
}

func _BackendService_FetchMatches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchMatchesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BackendServiceServer).FetchMatches(m, &backendServiceFetchMatchesServer{stream})
}

type BackendService_FetchMatchesServer interface {
	Send(*FetchMatchesResponse) error
	grpc.ServerStream
}

type backendServiceFetchMatchesServer struct {
	grpc.ServerStream
}

func (x *backendServiceFetchMatchesServer) Send(m *FetchMatchesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BackendService_AssignTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).AssignTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_AssignTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).AssignTickets(ctx, req.(*AssignTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ReleaseTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ReleaseTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ReleaseTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ReleaseTickets(ctx, req.(*ReleaseTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_ReleaseAllTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseAllTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).ReleaseAllTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_ReleaseAllTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).ReleaseAllTickets(ctx, req.(*ReleaseAllTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackendService_ServiceDesc is the grpc.ServiceDesc for BackendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openmatch.BackendService",
	HandlerType: (*BackendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignTickets",
			Handler:    _BackendService_AssignTickets_Handler,
		},
		{
			MethodName: "ReleaseTickets",
			Handler:    _BackendService_ReleaseTickets_Handler,
		},
		{
			MethodName: "ReleaseAllTickets",
			Handler:    _BackendService_ReleaseAllTickets_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchMatches",
			Handler:       _BackendService_FetchMatches_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/backend.proto",
}
